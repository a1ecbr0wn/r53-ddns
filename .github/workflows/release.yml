---
name: Release Binaries on Tag

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  RUSTFLAGS: "--deny warnings"

jobs:
  # Check the rust formatting
  format:
    name: Rust Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust Toolchain setup
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Format Check
        uses: mbrobbel/rustfmt-check@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build the Linux release artifacts
  release-tag-build-linux:
    name: Build tag as a release - Linux
    runs-on: ubuntu-latest
    needs: format
    strategy:
      matrix:
        RUST: [stable]
        TARGET:
          - x86_64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - armv7-unknown-linux-musleabihf
          - aarch64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cross setup
        run: cargo install cross

      - name: Test
        run: cross test --target=${{ matrix.TARGET }}

      - name: Build release
        run: cross build --profile=minsize --target=${{ matrix.TARGET }}

      - name: Package Release
        run: tar cvzf r53-ddns-${{ matrix.TARGET }}.tar.gz --directory=target/${{ matrix.TARGET }}/minsize r53-ddns

      - name: Generate SHA checksum
        run: shasum -a 256 -U r53-ddns-${{ matrix.TARGET }}.tar.gz > r53-ddns-${{ matrix.TARGET }}.sha

      - name: Generate MD5 checksum
        run: md5sum --tag r53-ddns-${{ matrix.TARGET }}.tar.gz > r53-ddns-${{ matrix.TARGET }}.md5

      - name: Upload the artifact with the workflow run
        uses: actions/upload-artifact@v4
        with:
          name: r53-ddns-${{ matrix.TARGET }}-${{ github.ref_name }}
          path: r53-ddns-${{ matrix.TARGET }}.*
          retention-days: 1

  # Build the MacOS release artifacts
  release-tag-build-macos:
    name: Build tag as a release - MacOS
    runs-on: macos-latest
    needs: format
    strategy:
      matrix:
        RUST: [stable]
        TARGET:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Toolchain setup
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.RUST }}
          target: ${{ matrix.TARGET }}

      - name: Cross setup
        run: cargo install cross

      - name: Test
        run: cross test

      - name: Build release
        run: cross build --profile=minsize --target=${{ matrix.TARGET }}

      - name: Package Release
        run: tar cvzf r53-ddns-${{ matrix.TARGET }}.tar.gz --directory=target/${{ matrix.TARGET }}/minsize r53-ddns

      - name: Generate SHA checksum
        run: shasum -a 256 -U r53-ddns-${{ matrix.TARGET }}.tar.gz > r53-ddns-${{ matrix.TARGET }}.sha

      - name: Generate MD5 checksum
        run: md5 r53-ddns-${{ matrix.TARGET }}.tar.gz > r53-ddns-${{ matrix.TARGET }}.md5

      - name: Upload the artifact with the workflow run
        uses: actions/upload-artifact@v4
        with:
          name: r53-ddns-${{ matrix.TARGET }}-${{ github.ref_name }}
          path: r53-ddns-${{ matrix.TARGET }}.*
          retention-days: 1

  # Publishing to crates.io - this will be skipped if the tag as a '-' in it for testing purposes
  release-tag-publish:
    name: Publish tag as a release
    runs-on: ubuntu-latest
    needs: [release-tag-build-linux, release-tag-build-macos]
    if: github.ref_type == 'tag' && ( contains(github.ref_name, '-') == false )

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish Application to crates.io
        env:
          CARGO_REGISTRY_TOKEN: "${{ secrets.CRATES_TOKEN }}"
        run: cargo publish

  # Package the artifacts as a release package
  release-tag-package:
    name: Tag Release Package
    runs-on: ubuntu-latest
    needs: [release-tag-build-linux, release-tag-build-macos]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Download all release artifacts from the workflow
        uses: actions/download-artifact@v4.1.7

      - name: Create CLI Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.md
          name: "Release ${{ github.ref_name }}"
          files: |
            LICENSE
            **/r53-ddns-*.*
            RELEASE-NOTES.md

  # Kick off the workflow in the tap repo (a1ecbr0wn/homebrew-r53-ddns) that will generate the homebrew formula
  generate-formula:
    name: Initiate the generation of homebrew formula
    runs-on: ubuntu-latest
    needs: [release-tag-build-linux, release-tag-build-macos]
    steps:
      - name: Repository Dispatch
        uses: benc-uk/workflow-dispatch@v1
        with:
          token: ${{ secrets.PAT }}
          repo: a1ecbr0wn/homebrew-r53-ddns
          ref: refs/heads/main
          workflow: tap.yml
          inputs: '{ "tap_version": "${{ github.ref_name }}" }'

  # Kick off the workflow in the snap repo (a1ecbr0wn/snapcraft-r53-ddns) that will generate the snapcraft yaml file
  generate-snap:
    name: Initiate the generation of the snapcraft yaml file
    runs-on: ubuntu-latest
    needs: [release-tag-build-linux, release-tag-build-macos]
    steps:
      - name: Repository Dispatch
        uses: benc-uk/workflow-dispatch@v1
        with:
          token: ${{ secrets.PAT }}
          repo: a1ecbr0wn/snapcraft-r53-ddns
          ref: refs/heads/main
          workflow: snap.yml
          inputs: '{ "snap_version": "${{ github.ref_name }}" }'
